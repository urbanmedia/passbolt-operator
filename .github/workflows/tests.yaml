name: unit-and-e2e-tests

on:
  push:
    branches:
      - "**"
    paths-ignore:
      - "*.md"
      - LICENSE
      - docker-compose*
      - .dockerignore
      #- .github/
      - .gitignore
      - .gitmodules
      - docs/
      - hack/
      - Makefile
      - PROJECT
      - charts/**
  pull_request:
    branches:
      - "!dependabot/**"

env:
  go_version: 1.19

jobs:
  vetting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
          ref: ${{ github.ref }}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: vetting
        shell: bash
        run: go vet ./...

  linting:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
        with:
          fetch-depth: 0
          submodules: true
          ref: ${{ github.ref }}

      - uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: golangci-lint
        uses: golangci/golangci-lint-action@v3
        with:
          version: latest
          args: --timeout=3m --issues-exit-code=1 ./...
          only-new-issues: true

  unit-tests:
    name: test the go code
    runs-on: ubuntu-latest
    needs:
      - vetting
      - linting
    #strategy:
    #  fail-fast: true
    #  matrix:
    #    kind_node_image:
    #      - kindest/node:v1.25.3
    #      - kindest/node:v1.24.7
    #      - kindest/node:v1.23.13
    #      - kindest/node:v1.22.15
    #      - kindest/node:v1.21.14
    env:
      LOG_DIR: logs
      FORMATTED_LOG_FOLDER_NAME: ""
    steps:
      - name: Install go ${{ env.go_version }}
        uses: actions/setup-go@v3
        with:
          go-version: ${{ env.go_version }}

      - name: Checkout code
        uses: actions/checkout@v3

      #- name: Create K8s Kind Cluster
      #  uses: helm/kind-action@v1.5.0
      #  with:
      #    node_image: ${{ matrix.kind_node_image }}

      - name: Modify _dist/ permissions
        run: |
          sudo chmod -R a+rw _data/pb_jwt
          sudo chmod -R a+rw _data/pb_gpg

      - name: Start Mysql database container
        run: docker-compose up -d db

      - name: Install mysql client
        run: |
          sudo apt-get update
          sudo apt-get install -y mysql-client
          sleep 5;

      - run: docker ps -a

      - name: Restore database
        run: |
          mysql \
            --host=127.0.0.1 \
            --port=13306 \
            --database=passbolt \
            --user=passbolt \
            --password=P4ssb0lt < _data/passbolt_db.sql

      - name: Start the other containers
        run: docker-compose up -d

      - run: docker-compose ps -a

      - name: Wait for Passbolt to be ready with a 1 minute timeout
        run: |
          timeout 1m bash -c 'until [[ "$(curl -l -s -o /dev/null -w ''%{http_code}'' http://localhost:8088/auth/login?)" == "200" ]]; do sleep 5; done'

      - if: always()
        run: docker-compose ps -a

      #- if: always()
      #  run: |
      #    echo FORMATTED_LOG_FOLDER_NAME=$(echo "${{ matrix.kind_node_image }}" | sed -e "s+/+-+g" -e "s+:+-+g") >> $GITHUB_ENV

      - name: Create log folder
        if: always()
        run: mkdir -p $LOG_DIR/${{ env.FORMATTED_LOG_FOLDER_NAME }}/

      - name: Store container logs
        if: always()
        id: deps_logs
        shell: bash
        run: |
          docker logs passbolt >& $LOG_DIR/${{ env.FORMATTED_LOG_FOLDER_NAME }}/passbolt.log
          docker logs db >& $LOG_DIR/${{ env.FORMATTED_LOG_FOLDER_NAME }}/db.log
          echo "OUTPUT=0" >> $GITHUB_OUTPUT

      - name: Upload docker logs artifact
        if: ${{ always() && (steps.deps_logs.outputs.OUTPUT == 0) }}
        uses: actions/upload-artifact@v3
        with:
          name: docker_container_logs
          path: |
            ${{ env.LOG_DIR }}/
          retention-days: 3

      - name: Setup Env
        run: |
          ./_data/credentials.sh

      - name: Run unit tests
        run: make test
